{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"v1/configuration/","text":"Configuration After installation, register dot-dependency-injection in your project by adding the below line to your configuration aggregator (usually: config/config.php ): Dot\\DependencyInjection\\ConfigProvider::class,","title":"Configuration"},{"location":"v1/configuration/#configuration","text":"After installation, register dot-dependency-injection in your project by adding the below line to your configuration aggregator (usually: config/config.php ): Dot\\DependencyInjection\\ConfigProvider::class,","title":"Configuration"},{"location":"v1/factories/","text":"Factories dot-dependency-injection is based on 2 reusable factories - AttributedRepositoryFactory and AttributedServiceFactory - able to inject any dependency into a class. AttributedRepositoryFactory Injects entity repositories into a class. Exceptions thrown Dot\\DependencyInjection\\Exception\\RuntimeException if repository does not exist Dot\\DependencyInjection\\Exception\\RuntimeException if repository does not extend Doctrine\\ORM\\EntityRepository Dot\\DependencyInjection\\Exception\\RuntimeException if repository does not have #[Entity] attribute Psr\\Container\\NotFoundExceptionInterface if Doctrine\\ORM\\EntityManagerInterface does not exist in the service container Psr\\Container\\ContainerExceptionInterface if service manager is unable to provide an instance of Doctrine\\ORM\\EntityManagerInterface AttributedServiceFactory Injects class dependencies into classes. If a dependency is specified using the dot notation, AttributedServiceFactory will try to load a service having that specific alias. If it does not find one, it will try to load the dependency as a config tree, checking each segment if it's available in the service container. Exceptions thrown Dot\\DependencyInjection\\Exception\\RuntimeException if service does not exist Dot\\DependencyInjection\\Exception\\RuntimeException if service does not have #[Inject] attribute on it's constructor Dot\\DependencyInjection\\Exception\\RuntimeException if service tries to inject itself recursively Psr\\Container\\NotFoundExceptionInterface if a dependency does not exist in the service container Psr\\Container\\ContainerExceptionInterface if service manager is unable to provide an instance of a dependency","title":"Factories"},{"location":"v1/factories/#factories","text":"dot-dependency-injection is based on 2 reusable factories - AttributedRepositoryFactory and AttributedServiceFactory - able to inject any dependency into a class.","title":"Factories"},{"location":"v1/factories/#attributedrepositoryfactory","text":"Injects entity repositories into a class.","title":"AttributedRepositoryFactory"},{"location":"v1/factories/#attributedservicefactory","text":"Injects class dependencies into classes. If a dependency is specified using the dot notation, AttributedServiceFactory will try to load a service having that specific alias. If it does not find one, it will try to load the dependency as a config tree, checking each segment if it's available in the service container.","title":"AttributedServiceFactory"},{"location":"v1/installation/","text":"Installation Install dotkernel/dot-dependency-injection by executing the following Composer command: composer require dotkernel/dot-dependency-injection","title":"Installation"},{"location":"v1/installation/#installation","text":"Install dotkernel/dot-dependency-injection by executing the following Composer command: composer require dotkernel/dot-dependency-injection","title":"Installation"},{"location":"v1/overview/","text":"Overview dot-dependency-injection is DotKernel's dependency injection service. By providing reusable factories for service and repository injection, it reduces code complexity in projects.","title":"Overview"},{"location":"v1/overview/#overview","text":"dot-dependency-injection is DotKernel's dependency injection service. By providing reusable factories for service and repository injection, it reduces code complexity in projects.","title":"Overview"},{"location":"v1/usage/","text":"Usage You can use it to: Inject class dependencies Inject entity repositories","title":"Usage"},{"location":"v1/usage/#usage","text":"You can use it to: Inject class dependencies Inject entity repositories","title":"Usage"},{"location":"v1/factories/repository/","text":"Inject entity repositories Prepare repository dot-dependency-injection determines the entity a repository is related to by looking at the #[Entity] attribute, added to the repository class. &lt;?php declare(strict_types=1); namespace YourApp\\Repository; #[Dot\\DependencyInjection\\Attribute\\Entity(name: YourApp\\Entity\\Example::class)] class ExampleRepository extends Doctrine\\ORM\\EntityRepository { } Each entity repository must extend Doctrine\\ORM\\EntityRepository . Register repository Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your repository FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Repository\\ExampleRepository::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class, ], ]; } }","title":"Inject entity repositories"},{"location":"v1/factories/repository/#inject-entity-repositories","text":"","title":"Inject entity repositories"},{"location":"v1/factories/repository/#prepare-repository","text":"dot-dependency-injection determines the entity a repository is related to by looking at the #[Entity] attribute, added to the repository class. &lt;?php declare(strict_types=1); namespace YourApp\\Repository; #[Dot\\DependencyInjection\\Attribute\\Entity(name: YourApp\\Entity\\Example::class)] class ExampleRepository extends Doctrine\\ORM\\EntityRepository { } Each entity repository must extend Doctrine\\ORM\\EntityRepository .","title":"Prepare repository"},{"location":"v1/factories/repository/#register-repository","text":"Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your repository FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Repository\\ExampleRepository::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class, ], ]; } }","title":"Register repository"},{"location":"v1/factories/service/","text":"Inject class dependencies Prepare class dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Dependencies are specified as separate parameters of the #[Inject] attribute. &lt;?php declare(strict_types=1); namespace YourApp\\Service; class Example { #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $config ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config.example\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $exampleConfig, ) { } Register class Open the ConfigProvider of the module where your class resides. Add a new entry under factories , where the key is your class FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Service\\Example::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class, ], ]; } }","title":"Inject class dependencies"},{"location":"v1/factories/service/#inject-class-dependencies","text":"","title":"Inject class dependencies"},{"location":"v1/factories/service/#prepare-class","text":"dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Dependencies are specified as separate parameters of the #[Inject] attribute. &lt;?php declare(strict_types=1); namespace YourApp\\Service; class Example { #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $config ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config.example\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $exampleConfig, ) { }","title":"Prepare class"},{"location":"v1/factories/service/#register-class","text":"Open the ConfigProvider of the module where your class resides. Add a new entry under factories , where the key is your class FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Service\\Example::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class, ], ]; } }","title":"Register class"}]}