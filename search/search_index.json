{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dot-dependency-injection DotKernel dependency injection service. This package can clean up your code, by getting rid of all the factories you write, sometimes just to inject a dependency or two. Installation Install dot-dependency-injection by running the following command in your project directory: composer require dotkernel/dot-dependency-injection After installing, register dot-dependency-injection in your project by adding the below line to your configuration aggregate (usually: config/config.php ): Dot\\DependencyInjection\\ConfigProvider::class, Usage Using the AttributedServiceFactory You can register services in the service manager using AttributedServiceFactory as seen in the below example: return [ 'factories' =&gt; [ ServiceClass::class =&gt; AttributedServiceFactory::class, ], ]; NOTE You can use only the fully qualified class name as the service key The next step is to add the #[Inject] attribute to the service constructor with the service FQCNs to inject: use Dot\\DependencyInjection\\Attribute\\Inject; #[Inject( App\\Srevice\\Dependency1::class, App\\Srevice\\Dependency2::class, \"config\", )] public function __construct( protected App\\Srevice\\Dependency1 $dep1, protected App\\Srevice\\Dependency2 $dep2, protected array $config ) { } The #[Inject] attribute is telling AttributedServiceFactory to inject the services specified as parameters. Valid service names should be provided, as registered in the service manager. To inject an array value from the service manager, you can use dot notation as below use Dot\\DependencyInjection\\Attribute\\Inject; #[Inject( \"config.debug\", )] which will inject $container-&gt;get('config')['debug']; . NOTE Even if using dot notation, AttributedServiceFactory will check first if a service name exists with that name. Using the AttributedRepositoryFactory You can register doctrine repositories and inject them using the AttributedRepositoryFactory as below: return [ 'factories' =&gt; [ ExampleRepository::class =&gt; AttributedRepositoryFactory::class, ], ]; The next step is to add the #[Entity] attribute in the repository class. The name field has to be the fully qualified class name. Every repository should extend Doctrine\\ORM\\EntityRepository . use Api\\App\\Entity\\Example; use Doctrine\\ORM\\EntityRepository; use Dot\\DependencyInjection\\Attribute\\Entity; #[Entity(name: Example::class)] class ExampleRepository extends EntityRepository { } Dependencies injected via the #[Entity] / #[Inject] attributes are not cached Injecting dependencies into property setters are not supported","title":"Home"},{"location":"#dot-dependency-injection","text":"DotKernel dependency injection service. This package can clean up your code, by getting rid of all the factories you write, sometimes just to inject a dependency or two.","title":"dot-dependency-injection"},{"location":"#installation","text":"Install dot-dependency-injection by running the following command in your project directory: composer require dotkernel/dot-dependency-injection After installing, register dot-dependency-injection in your project by adding the below line to your configuration aggregate (usually: config/config.php ): Dot\\DependencyInjection\\ConfigProvider::class,","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"v1/configuration/","text":"Configuration After installation, register dot-dependency-injection in your project by adding the below line to your configuration aggregator (usually: config/config.php ): Dot\\DependencyInjection\\ConfigProvider::class,","title":"Configuration"},{"location":"v1/configuration/#configuration","text":"After installation, register dot-dependency-injection in your project by adding the below line to your configuration aggregator (usually: config/config.php ): Dot\\DependencyInjection\\ConfigProvider::class,","title":"Configuration"},{"location":"v1/factories/","text":"Factories dot-dependency-injection is based on 2 reusable factories - AttributedRepositoryFactory and AttributedServiceFactory - able to inject any dependency into a class. AttributedRepositoryFactory Injects entity repositories into a class. Exceptions thrown Dot\\DependencyInjection\\Exception\\RuntimeException if repository does not exist Dot\\DependencyInjection\\Exception\\RuntimeException if repository does not extend Doctrine\\ORM\\EntityRepository Dot\\DependencyInjection\\Exception\\RuntimeException if repository does not have #[Entity] attribute Psr\\Container\\NotFoundExceptionInterface if Doctrine\\ORM\\EntityManagerInterface does not exist in the service container Psr\\Container\\ContainerExceptionInterface if service manager is unable to provide an instance of Doctrine\\ORM\\EntityManagerInterface AttributedServiceFactory Injects class dependencies into classes. If a dependency is specified using the dot notation, AttributedServiceFactory will try to load a service having that specific alias. If it does not find one, it will try to load the dependency as a config tree, checking each segment if it's available in the service container. Exceptions thrown Dot\\DependencyInjection\\Exception\\RuntimeException if service does not exist Dot\\DependencyInjection\\Exception\\RuntimeException if service does not have #[Inject] attribute on it's constructor Dot\\DependencyInjection\\Exception\\RuntimeException if service tries to inject itself recursively Psr\\Container\\NotFoundExceptionInterface if a dependency does not exist in the service container Psr\\Container\\ContainerExceptionInterface if service manager is unable to provide an instance of a dependency","title":"Factories"},{"location":"v1/factories/#factories","text":"dot-dependency-injection is based on 2 reusable factories - AttributedRepositoryFactory and AttributedServiceFactory - able to inject any dependency into a class.","title":"Factories"},{"location":"v1/factories/#attributedrepositoryfactory","text":"Injects entity repositories into a class.","title":"AttributedRepositoryFactory"},{"location":"v1/factories/#attributedservicefactory","text":"Injects class dependencies into classes. If a dependency is specified using the dot notation, AttributedServiceFactory will try to load a service having that specific alias. If it does not find one, it will try to load the dependency as a config tree, checking each segment if it's available in the service container.","title":"AttributedServiceFactory"},{"location":"v1/installation/","text":"Installation Install dotkernel/dot-dependency-injection by executing the following Composer command: composer require dotkernel/dot-dependency-injection","title":"Installation"},{"location":"v1/installation/#installation","text":"Install dotkernel/dot-dependency-injection by executing the following Composer command: composer require dotkernel/dot-dependency-injection","title":"Installation"},{"location":"v1/overview/","text":"Overview dot-dependency-injection is DotKernel's dependency injection service. By providing reusable factories for service and repository injection, it reduces code complexity in projects.","title":"Overview"},{"location":"v1/overview/#overview","text":"dot-dependency-injection is DotKernel's dependency injection service. By providing reusable factories for service and repository injection, it reduces code complexity in projects.","title":"Overview"},{"location":"v1/usage/","text":"Usage You can use it to: Inject class dependencies Inject entity repositories","title":"Usage"},{"location":"v1/usage/#usage","text":"You can use it to: Inject class dependencies Inject entity repositories","title":"Usage"},{"location":"v1/factories/repository/","text":"Inject entity repositories Prepare repository dot-dependency-injection determines the entity a repository is related to by looking at the #[Entity] attribute, added to the repository class. &lt;?php declare(strict_types=1); namespace YourApp\\Repository; #[Dot\\DependencyInjection\\Attribute\\Entity(name: YourApp\\Entity\\Example::class)] class ExampleRepository extends Doctrine\\ORM\\EntityRepository { } Each entity repository must extend Doctrine\\ORM\\EntityRepository . Register repository Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your repository FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Repository\\ExampleRepository::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class, ], ]; } }","title":"Inject entity repositories"},{"location":"v1/factories/repository/#inject-entity-repositories","text":"","title":"Inject entity repositories"},{"location":"v1/factories/repository/#prepare-repository","text":"dot-dependency-injection determines the entity a repository is related to by looking at the #[Entity] attribute, added to the repository class. &lt;?php declare(strict_types=1); namespace YourApp\\Repository; #[Dot\\DependencyInjection\\Attribute\\Entity(name: YourApp\\Entity\\Example::class)] class ExampleRepository extends Doctrine\\ORM\\EntityRepository { } Each entity repository must extend Doctrine\\ORM\\EntityRepository .","title":"Prepare repository"},{"location":"v1/factories/repository/#register-repository","text":"Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your repository FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Repository\\ExampleRepository::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedRepositoryFactory::class, ], ]; } }","title":"Register repository"},{"location":"v1/factories/service/","text":"Inject class dependencies Prepare class dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Dependencies are specified as separate parameters of the #[Inject] attribute. &lt;?php declare(strict_types=1); namespace YourApp\\Service; class Example { #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $config ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config.example\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $exampleConfig, ) { } Register class Open the ConfigProvider of the module where your class resides. Add a new entry under factories , where the key is your class FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Service\\Example::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class, ], ]; } }","title":"Inject class dependencies"},{"location":"v1/factories/service/#inject-class-dependencies","text":"","title":"Inject class dependencies"},{"location":"v1/factories/service/#prepare-class","text":"dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Dependencies are specified as separate parameters of the #[Inject] attribute. &lt;?php declare(strict_types=1); namespace YourApp\\Service; class Example { #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $config ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: #[Dot\\DependencyInjection\\Attribute\\Inject( YourApp\\Repository\\Dependency1::class, YourApp\\Helper\\Dependency2::class, \"config.example\", )] public function __construct( protected YourApp\\Repository\\Dependency1 $dependency1, protected YourApp\\Helper\\Dependency2 $dependency2, protected array $exampleConfig, ) { }","title":"Prepare class"},{"location":"v1/factories/service/#register-class","text":"Open the ConfigProvider of the module where your class resides. Add a new entry under factories , where the key is your class FQCN and the value is Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ YourApp\\Service\\Example::class =&gt; Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class, ], ]; } }","title":"Register class"}]}